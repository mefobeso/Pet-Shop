"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useWindowSize = void 0;

var _react = _interopRequireDefault(require("react"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var events = new Set();

var onResize = function onResize() {
  return events.forEach(function (fn) {
    return fn();
  });
};

var useWindowSize = function useWindowSize() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return function () {
    var _options$throttleMs = options.throttleMs,
        throttleMs = _options$throttleMs === void 0 ? 100 : _options$throttleMs;

    var _React$useState = _react.default.useState({
      width: window.innerWidth,
      height: window.innerHeight
    }),
        _React$useState2 = _slicedToArray(_React$useState, 2),
        size = _React$useState2[0],
        setSize = _React$useState2[1];

    var handle = (0, _utils.throttle)(function () {
      setSize({
        width: window.innerWidth,
        height: window.innerHeight
      });
    }, throttleMs);

    _react.default.useEffect(function () {
      if (events.size === 0) {
        window.addEventListener('resize', onResize, true);
      }

      events.add(handle);
      return function () {
        events.delete(handle);

        if (events.size === 0) {
          window.removeEventListener('resize', onResize, true);
        }
      };
    }, []);

    return size;
  }();
};

exports.useWindowSize = useWindowSize;