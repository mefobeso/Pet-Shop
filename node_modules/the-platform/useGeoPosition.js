"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGeoPosition = void 0;

var _react = _interopRequireDefault(require("react"));

var _createResource = require("./createResource");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var PositionResource = (0, _createResource.createResource)(load, function (positionOptions) {
  return 'geoposition';
});

function load(positionOptions) {
  return new Promise(function (resolve, reject) {
    return navigator.geolocation.getCurrentPosition(function (position) {
      resolve(position);
    }, function (error) {
      reject(error);
    }, positionOptions);
  });
}

var useGeoPosition = function useGeoPosition(positionOptions) {
  // We should read new initialCoords for each component but useMemo
  // does not seem to memoize when a component is suspended
  // @todo determine if this is intended behavior or a bug
  // const initialAccessTime = React.useMemo(() => Date.now(), []);
  var initialCoords = PositionResource.read();

  var _React$useState = _react.default.useState(initialCoords),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      position = _React$useState2[0],
      setPosition = _React$useState2[1];

  _react.default.useEffect(function () {
    var listener = navigator.geolocation.watchPosition(function (positionUpdate) {
      setPosition(positionUpdate);
    }, function () {
      return null;
    }, positionOptions);
    return function () {
      return navigator.geolocation.clearWatch(listener);
    };
  }, []);

  return position;
};

exports.useGeoPosition = useGeoPosition;