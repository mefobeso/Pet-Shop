"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useNetworkStatus = void 0;

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useNetworkStatus = function useNetworkStatus() {
  var _React$useState = _react.default.useState(navigator.onLine),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      status = _React$useState2[0],
      setStatus = _React$useState2[1];

  var _React$useState3 = _react.default.useState(undefined),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      offlineAt = _React$useState4[0],
      setOfflineAt = _React$useState4[1];

  _react.default.useEffect(function () {
    var handleOnline = function handleOnline() {
      setStatus(true);
      setOfflineAt(undefined);
    };

    var handleOffline = function handleOffline() {
      setStatus(false);
      setOfflineAt(new Date());
    };

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);
    return function () {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  return {
    isOnline: status,
    offlineAt: offlineAt
  };
};

exports.useNetworkStatus = useNetworkStatus;